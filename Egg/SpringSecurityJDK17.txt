@Configuration
@EnableWebSecurity
// @EnableGlobalMethodSecurity //@deprecated
@EnableMethodSecurity // En lugar de @EnableGlobalMethodSecurity
public class SeguridadWeb {

    // @PreAuthorize("hasRole('ROLE_ADMIN')")

    @Autowired
    public UsuarioServicio usuarioServicio;

    // Encriptar contraseñas
    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(usuarioServicio)
                .passwordEncoder(new BCryptPasswordEncoder());
    }

    // Direcciones permitidas y filtros
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {
        return httpSecurity
                .csrf(csrf -> {
                    csrf.disable();
                })
                // Direcciones permitidas
                .authorizeHttpRequests(auth -> {
                    auth.requestMatchers("/admin/*").hasRole("ADMIN");
                    auth.requestMatchers("/login", "/registrar").permitAll();
                    auth.requestMatchers("/css/*", "/js/*", "/img/*");
                    auth.requestMatchers("/css/*", "/js/*", "/img/*", "/registrar", "/registro")
                            .permitAll();
                    auth.anyRequest().authenticated();
                })
                // Formulario de login
                .formLogin(form -> {
                    form.loginPage("/login"); // Url de la pagina de login")
                    form.loginProcessingUrl("/logincheck"); // Url del action del formulario
                    form.usernameParameter("email"); // Nombre del input del formulario")
                    form.passwordParameter("password"); // Nombre del input del formulario")
                    form.defaultSuccessUrl("/inicio", true); // Url de inicio correcto
                    // form.successHandler(successHandler()); // Redirect al hacer login correcto ↓
                    // Método abajo
                    form.permitAll();
                })
                .logout(logout -> {
                    logout.logoutUrl("/logout"); // Url de logout
                    logout.logoutSuccessUrl("/"); // Url de re direccionamiento al hacer logout
                    logout.permitAll();
                })
                .sessionManagement(session -> {
                    session.sessionCreationPolicy(SessionCreationPolicy.ALWAYS); // ALWAYS, IF_REQUIRED, NEVER,
                                                                                 // STATELESS
                    session.maximumSessions(1); // Máximo de sesiones permitidas
                    session.invalidSessionUrl("/"); // Url de re direccionamiento cuando se cierra sesión
                    session.sessionFixation(sessionFixation -> {
                        // migrateSession() - newSession() - none()
                        sessionFixation.migrateSession();
                    });
                })
                .build();
    }
}

















usuarioservicio 

import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;





//    @Bean //SPRING 3 EN ADELANTE
//    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
//        http
//            .authorizeHttpRequests((authz) -> authz
//                .requestMatchers("/login","/register").permitAll()
//            ).formLogin((login)->login
//                    .loginPage("/login")
//                    .usernameParameter("")
//            ).logout((logout)->logout
//                    .logoutUrl("/logout")
//            ).csrf((csrf)-> csrf.disable());
//        return http.build();
//    }